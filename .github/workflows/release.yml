name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build Release
      run: |
        swift build -c release
        
    - name: Create App Bundle
      run: |
        mkdir -p build/Fuego.app/Contents/{MacOS,Resources}
        
        # Copy executable
        cp .build/release/Fuego build/Fuego.app/Contents/MacOS/
        
        # Copy Info.plist
        cp Sources/Fuego/Info.plist build/Fuego.app/Contents/
        
        # Create PkgInfo
        echo -n "APPL????" > build/Fuego.app/Contents/PkgInfo
        
        # Make executable
        chmod +x build/Fuego.app/Contents/MacOS/Fuego
        
    - name: Code Sign (if certificates available)
      if: ${{ env.DEVELOPER_ID_APPLICATION_CERT != '' }}
      env:
        DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
        DEVELOPER_ID_APPLICATION_KEY: ${{ secrets.DEVELOPER_ID_APPLICATION_KEY }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
        
        # Import certificates
        echo "$DEVELOPER_ID_APPLICATION_CERT" | base64 -d > cert.p12
        echo "$DEVELOPER_ID_APPLICATION_KEY" | base64 -d > key.p12
        security import cert.p12 -k build.keychain -P "" -T /usr/bin/codesign
        security import key.p12 -k build.keychain -P "" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        
        # Sign the app
        codesign --force --verify --verbose --sign "Developer ID Application" build/Fuego.app
        
    - name: Create DMG
      run: |
        # Install create-dmg if not available
        if ! command -v create-dmg &> /dev/null; then
          brew install create-dmg
        fi
        
        # Create DMG
        create-dmg \
          --volname "Fuego" \
          --volicon "build/Fuego.app/Contents/Resources/AppIcon.icns" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Fuego.app" 200 190 \
          --hide-extension "Fuego.app" \
          --app-drop-link 600 185 \
          --format UDBZ \
          "build/Fuego-${{ github.ref_name }}.dmg" \
          "build/Fuego.app" || \
        hdiutil create -volname "Fuego" -srcfolder "build/Fuego.app" -ov -format UDBZ "build/Fuego-${{ github.ref_name }}.dmg"
        
    - name: Create ZIP for Homebrew
      run: |
        cd build
        zip -r "Fuego-${{ github.ref_name }}.zip" Fuego.app
        
    - name: Calculate Checksums
      run: |
        cd build
        shasum -a 256 "Fuego-${{ github.ref_name }}.dmg" > "Fuego-${{ github.ref_name }}.dmg.sha256"
        shasum -a 256 "Fuego-${{ github.ref_name }}.zip" > "Fuego-${{ github.ref_name }}.zip.sha256"
        
    - name: Notarize (if credentials available)
      if: ${{ env.NOTARIZATION_USERNAME != '' }}
      env:
        NOTARIZATION_USERNAME: ${{ secrets.NOTARIZATION_USERNAME }}
        NOTARIZATION_PASSWORD: ${{ secrets.NOTARIZATION_PASSWORD }}
        NOTARIZATION_TEAM_ID: ${{ secrets.NOTARIZATION_TEAM_ID }}
      run: |
        # Submit for notarization
        xcrun notarytool submit "build/Fuego-${{ github.ref_name }}.dmg" \
          --apple-id "$NOTARIZATION_USERNAME" \
          --password "$NOTARIZATION_PASSWORD" \
          --team-id "$NOTARIZATION_TEAM_ID" \
          --wait
          
        # Staple the notarization
        xcrun stapler staple "build/Fuego-${{ github.ref_name }}.dmg"
        
    - name: Create Release Notes
      run: |
        cat > release_notes.md << 'EOF'
        # Fuego ${{ github.ref_name }}
        
        ## Installation
        
        ### Direct Download
        - Download `Fuego-${{ github.ref_name }}.dmg`
        - Open the DMG and drag Fuego to Applications
        - Run Fuego from Applications or Spotlight
        
        ### Homebrew (recommended)
        ```bash
        brew install --cask fuego
        ```
        
        ## What's New
        - Focus session management with blocking engine
        - Pomodoro timer with customizable intervals
        - Profile system for different work modes
        - Automation hooks for AppleScript/Shell scripts
        - Menu bar interface with quick access
        - Statistics and session tracking
        - Scheduling for automatic focus sessions
        
        ## System Requirements
        - macOS 13.0 or later
        - Apple Silicon or Intel Mac
        
        ## Security Note
        This release is code-signed and notarized for your security.
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ github.ref_name }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/Fuego-${{ github.ref_name }}.dmg
          build/Fuego-${{ github.ref_name }}.zip
          build/Fuego-${{ github.ref_name }}.dmg.sha256
          build/Fuego-${{ github.ref_name }}.zip.sha256
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update Homebrew Cask (on stable release)
      if: ${{ !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'alpha') }}
      run: |
        # Get SHA256 of the ZIP file
        ZIP_SHA256=$(cat "build/Fuego-${{ github.ref_name }}.zip.sha256" | cut -d' ' -f1)
        
        # Create or update Homebrew cask
        cat > fuego.rb << EOF
        cask "fuego" do
          version "${{ github.ref_name }}"
          sha256 "$ZIP_SHA256"
        
          url "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/Fuego-${{ github.ref_name }}.zip"
          name "Fuego"
          desc "Open-source Focus app alternative for macOS"
          homepage "https://github.com/${{ github.repository }}"
        
          livecheck do
            url :url
            strategy :github_latest
          end
        
          app "Fuego.app"
        
          zap trash: [
            "~/Library/Application Support/Fuego",
            "~/Library/Preferences/com.fuego.app.plist",
            "~/Documents/Fuego.sqlite",
          ]
        end
        EOF
        
        echo "Generated Homebrew cask file:"
        cat fuego.rb